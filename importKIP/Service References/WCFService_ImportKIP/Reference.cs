//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace ImportKIP.WCFService_ImportKIP {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusAnswer_ImportKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.DataThreadsList_result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.KipDataList_result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.ImpLogKIP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.KipDataListBD_result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.KipDataListFile_result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.RemoveBoundKIP))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.ParamSecList_result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ImportKIP.WCFService_ImportKIP.DataMGList_KIP))]
    public partial class StatusAnswer_ImportKIP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorMessageField;
        
        private bool IsValidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataThreadsList_result", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DataThreadsList_result : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.DataThreadsList> DataThreadsListsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.DataThreadsList> DataThreadsLists {
            get {
                return this.DataThreadsListsField;
            }
            set {
                if ((object.ReferenceEquals(this.DataThreadsListsField, value) != true)) {
                    this.DataThreadsListsField = value;
                    this.RaisePropertyChanged("DataThreadsLists");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KipDataList_result", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KipDataList_result : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KipDataList> KipDataListsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KipDataList> KipDataLists {
            get {
                return this.KipDataListsField;
            }
            set {
                if ((object.ReferenceEquals(this.KipDataListsField, value) != true)) {
                    this.KipDataListsField = value;
                    this.RaisePropertyChanged("KipDataLists");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpLogKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpLogKIP : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private ImportKIP.WCFService_ImportKIP.ImpLog_resultKIP ImpLogKIP_resultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ImportKIP.WCFService_ImportKIP.ImpLog_resultKIP ImpLogKIP_result {
            get {
                return this.ImpLogKIP_resultField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpLogKIP_resultField, value) != true)) {
                    this.ImpLogKIP_resultField = value;
                    this.RaisePropertyChanged("ImpLogKIP_result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpLog_resulAnalyzetKipFile", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpLog_resulAnalyzetKipFile : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private ImportKIP.WCFService_ImportKIP.ImpLogAnaliz_resultKIP ImpLogAnalizKIP_resultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ImportKIP.WCFService_ImportKIP.ImpLogAnaliz_resultKIP ImpLogAnalizKIP_result {
            get {
                return this.ImpLogAnalizKIP_resultField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpLogAnalizKIP_resultField, value) != true)) {
                    this.ImpLogAnalizKIP_resultField = value;
                    this.RaisePropertyChanged("ImpLogAnalizKIP_result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KipDataListBD_result", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KipDataListBD_result : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KipDataListBD> KipDataListsBDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KipDataListBD> KipDataListsBD {
            get {
                return this.KipDataListsBDField;
            }
            set {
                if ((object.ReferenceEquals(this.KipDataListsBDField, value) != true)) {
                    this.KipDataListsBDField = value;
                    this.RaisePropertyChanged("KipDataListsBD");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KipDataListFile_result", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KipDataListFile_result : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KipDataListFile> KipDataListsFileField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KipDataListFile> KipDataListsFile {
            get {
                return this.KipDataListsFileField;
            }
            set {
                if ((object.ReferenceEquals(this.KipDataListsFileField, value) != true)) {
                    this.KipDataListsFileField = value;
                    this.RaisePropertyChanged("KipDataListsFile");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyBoundResultKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyBoundResultKIP : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KeyBoundKIP> GetKeyBoundListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.KeyBoundKIP> GetKeyBoundList {
            get {
                return this.GetKeyBoundListField;
            }
            set {
                if ((object.ReferenceEquals(this.GetKeyBoundListField, value) != true)) {
                    this.GetKeyBoundListField = value;
                    this.RaisePropertyChanged("GetKeyBoundList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoveBoundKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class RemoveBoundKIP : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private ImportKIP.WCFService_ImportKIP.RemoveBoundResultKIP RemoveBoundKIP_ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ImportKIP.WCFService_ImportKIP.RemoveBoundResultKIP RemoveBoundKIP_Result {
            get {
                return this.RemoveBoundKIP_ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoveBoundKIP_ResultField, value) != true)) {
                    this.RemoveBoundKIP_ResultField = value;
                    this.RaisePropertyChanged("RemoveBoundKIP_Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParamSecList_result", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ParamSecList_result : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.ParamSecList> ParamSecListsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.ParamSecList> ParamSecLists {
            get {
                return this.ParamSecListsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamSecListsField, value) != true)) {
                    this.ParamSecListsField = value;
                    this.RaisePropertyChanged("ParamSecLists");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataMGList_KIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DataMGList_KIP : ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP {
        
        private System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.DataMGListKIP> DataMGListsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ImportKIP.WCFService_ImportKIP.DataMGListKIP> DataMGLists {
            get {
                return this.DataMGListsField;
            }
            set {
                if ((object.ReferenceEquals(this.DataMGListsField, value) != true)) {
                    this.DataMGListsField = value;
                    this.RaisePropertyChanged("DataMGLists");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataMGListKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DataMGListKIP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KEYMGField;
        
        private string NAMEMGField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KEYMG {
            get {
                return this.KEYMGField;
            }
            set {
                if ((object.ReferenceEquals(this.KEYMGField, value) != true)) {
                    this.KEYMGField = value;
                    this.RaisePropertyChanged("KEYMG");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NAMEMG {
            get {
                return this.NAMEMGField;
            }
            set {
                if ((object.ReferenceEquals(this.NAMEMGField, value) != true)) {
                    this.NAMEMGField = value;
                    this.RaisePropertyChanged("NAMEMG");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataThreadsList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DataThreadsList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KEYTHREADSField;
        
        private string NAMEHREADSField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KEYTHREADS {
            get {
                return this.KEYTHREADSField;
            }
            set {
                if ((object.ReferenceEquals(this.KEYTHREADSField, value) != true)) {
                    this.KEYTHREADSField = value;
                    this.RaisePropertyChanged("KEYTHREADS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NAMEHREADS {
            get {
                return this.NAMEHREADSField;
            }
            set {
                if ((object.ReferenceEquals(this.NAMEHREADSField, value) != true)) {
                    this.NAMEHREADSField = value;
                    this.RaisePropertyChanged("NAMEHREADS");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KipDataList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KipDataList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string dMeasDateField;
        
        private string nJourKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dMeasDate {
            get {
                return this.dMeasDateField;
            }
            set {
                if ((object.ReferenceEquals(this.dMeasDateField, value) != true)) {
                    this.dMeasDateField = value;
                    this.RaisePropertyChanged("dMeasDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nJourKey {
            get {
                return this.nJourKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.nJourKeyField, value) != true)) {
                    this.nJourKeyField = value;
                    this.RaisePropertyChanged("nJourKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpLog_resultKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpLog_resultKIP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ImpLogKIP_result_retField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImpLogKIP_result_ret {
            get {
                return this.ImpLogKIP_result_retField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpLogKIP_result_retField, value) != true)) {
                    this.ImpLogKIP_result_retField = value;
                    this.RaisePropertyChanged("ImpLogKIP_result_ret");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpLogAnaliz_resultKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpLogAnaliz_resultKIP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ImpLogAnalizKIP_result_retField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImpLogAnalizKIP_result_ret {
            get {
                return this.ImpLogAnalizKIP_result_retField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpLogAnalizKIP_result_retField, value) != true)) {
                    this.ImpLogAnalizKIP_result_retField = value;
                    this.RaisePropertyChanged("ImpLogAnalizKIP_result_ret");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KipDataListBD", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KipDataListBD : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNAMEField;
        
        private string NKIP_KEYField;
        
        private string NKMField;
        
        private string cTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNAME {
            get {
                return this.CNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CNAMEField, value) != true)) {
                    this.CNAMEField = value;
                    this.RaisePropertyChanged("CNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NKIP_KEY {
            get {
                return this.NKIP_KEYField;
            }
            set {
                if ((object.ReferenceEquals(this.NKIP_KEYField, value) != true)) {
                    this.NKIP_KEYField = value;
                    this.RaisePropertyChanged("NKIP_KEY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NKM {
            get {
                return this.NKMField;
            }
            set {
                if ((object.ReferenceEquals(this.NKMField, value) != true)) {
                    this.NKMField = value;
                    this.RaisePropertyChanged("NKM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cType {
            get {
                return this.cTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.cTypeField, value) != true)) {
                    this.cTypeField = value;
                    this.RaisePropertyChanged("cType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KipDataListFile", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KipDataListFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ccommentField;
        
        private string ckipnumField;
        
        private string nkmField;
        
        private string nrawkeyField;
        
        private string nu_polField;
        
        private string nu_tzField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ccomment {
            get {
                return this.ccommentField;
            }
            set {
                if ((object.ReferenceEquals(this.ccommentField, value) != true)) {
                    this.ccommentField = value;
                    this.RaisePropertyChanged("ccomment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ckipnum {
            get {
                return this.ckipnumField;
            }
            set {
                if ((object.ReferenceEquals(this.ckipnumField, value) != true)) {
                    this.ckipnumField = value;
                    this.RaisePropertyChanged("ckipnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nkm {
            get {
                return this.nkmField;
            }
            set {
                if ((object.ReferenceEquals(this.nkmField, value) != true)) {
                    this.nkmField = value;
                    this.RaisePropertyChanged("nkm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nrawkey {
            get {
                return this.nrawkeyField;
            }
            set {
                if ((object.ReferenceEquals(this.nrawkeyField, value) != true)) {
                    this.nrawkeyField = value;
                    this.RaisePropertyChanged("nrawkey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nu_pol {
            get {
                return this.nu_polField;
            }
            set {
                if ((object.ReferenceEquals(this.nu_polField, value) != true)) {
                    this.nu_polField = value;
                    this.RaisePropertyChanged("nu_pol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nu_tz {
            get {
                return this.nu_tzField;
            }
            set {
                if ((object.ReferenceEquals(this.nu_tzField, value) != true)) {
                    this.nu_tzField = value;
                    this.RaisePropertyChanged("nu_tz");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyBoundKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyBoundKIP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyBDField;
        
        private string KeyFileField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyBD {
            get {
                return this.KeyBDField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyBDField, value) != true)) {
                    this.KeyBDField = value;
                    this.RaisePropertyChanged("KeyBD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyFile {
            get {
                return this.KeyFileField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyFileField, value) != true)) {
                    this.KeyFileField = value;
                    this.RaisePropertyChanged("KeyFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoveBoundResultKIP", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class RemoveBoundResultKIP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int RemoveBoundKIPField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RemoveBoundKIP {
            get {
                return this.RemoveBoundKIPField;
            }
            set {
                if ((this.RemoveBoundKIPField.Equals(value) != true)) {
                    this.RemoveBoundKIPField = value;
                    this.RaisePropertyChanged("RemoveBoundKIP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParamSecList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ParamSecList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NKM_BEGINField;
        
        private string NKM_ENDField;
        
        private string NLENGTHField;
        
        private string NUMBERKIPField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NKM_BEGIN {
            get {
                return this.NKM_BEGINField;
            }
            set {
                if ((object.ReferenceEquals(this.NKM_BEGINField, value) != true)) {
                    this.NKM_BEGINField = value;
                    this.RaisePropertyChanged("NKM_BEGIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NKM_END {
            get {
                return this.NKM_ENDField;
            }
            set {
                if ((object.ReferenceEquals(this.NKM_ENDField, value) != true)) {
                    this.NKM_ENDField = value;
                    this.RaisePropertyChanged("NKM_END");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NLENGTH {
            get {
                return this.NLENGTHField;
            }
            set {
                if ((object.ReferenceEquals(this.NLENGTHField, value) != true)) {
                    this.NLENGTHField = value;
                    this.RaisePropertyChanged("NLENGTH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NUMBERKIP {
            get {
                return this.NUMBERKIPField;
            }
            set {
                if ((object.ReferenceEquals(this.NUMBERKIPField, value) != true)) {
                    this.NUMBERKIPField = value;
                    this.RaisePropertyChanged("NUMBERKIP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFService_ImportKIP.IWCFService_ImportKIP")]
    public interface IWCFService_ImportKIP {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetDataMGListKIP", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetDataMGListKIPResponse")]
        System.IAsyncResult BeginGetDataMGListKIP(System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.DataMGList_KIP EndGetDataMGListKIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetDataThreadsList", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetDataThreadsListResponse")]
        System.IAsyncResult BeginGetDataThreadsList(string inKeyMg, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.DataThreadsList_result EndGetDataThreadsList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetDataKipList", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetDataKipListResponse")]
        System.IAsyncResult BeginGetDataKipList(string inKeyThread, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.KipDataList_result EndGetDataKipList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/ImportFile", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/ImportFileResponse")]
        System.IAsyncResult BeginImportFile(double impKey, string typeOfImport, string fileName, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndImportFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetImpLog", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetImpLogResponse")]
        System.IAsyncResult BeginGetImpLog(string keyJornal, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.ImpLogKIP EndGetImpLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetImpAnalyzeFileLog", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetImpAnalyzeFileLogResponse")]
        System.IAsyncResult BeginGetImpAnalyzeFileLog(string keyJornal, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile EndGetImpAnalyzeFileLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetDataKipListBD", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetDataKipListBDResponse")]
        System.IAsyncResult BeginGetDataKipListBD(string keyJornal, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.KipDataListBD_result EndGetDataKipListBD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetDataKipListFile", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetDataKipListFileResponse")]
        System.IAsyncResult BeginGetDataKipListFile(string keyJornal, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.KipDataListFile_result EndGetDataKipListFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/ImportKipMatching", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/ImportKipMatchingResponse")]
        System.IAsyncResult BeginImportKipMatching(string in_nVTDMakingKey, string in_Filekey, string in_DBKey, int typeLink, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP EndImportKipMatching(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/ImportKipMatchingAuto", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/ImportKipMatchingAutoResponse")]
        System.IAsyncResult BeginImportKipMatchingAuto(string in_nVTDMakingKey, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndImportKipMatchingAuto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/ImportKipMeasurement", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/ImportKipMeasurementResponse")]
        System.IAsyncResult BeginImportKipMeasurement(string in_nJournalKey, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndImportKipMeasurement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/KipIsHide", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/KipIsHideResponse")]
        System.IAsyncResult BeginKipIsHide(string in_nJournalKey, string in_nKipKey, int isHide, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndKipIsHide(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/KipIsHideBD", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/KipIsHideBDResponse")]
        System.IAsyncResult BeginKipIsHideBD(string in_nJournalKey, string in_nKipKeyBD, int isHide, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndKipIsHideBD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/RemoveBound", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/RemoveBoundResponse")]
        System.IAsyncResult BeginRemoveBound(string keyImport, string in_Filekey, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.RemoveBoundKIP EndRemoveBound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetKIPMapping", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetKIPMappingResponse")]
        System.IAsyncResult BeginGetKIPMapping(string in_nVTDMakingKey, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP EndGetKIPMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/DeleteKipMeasurement", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/DeleteKipMeasurementResponse")]
        System.IAsyncResult BeginDeleteKipMeasurement(string jornalKey, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndDeleteKipMeasurement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFService_ImportKIP/GetSec_Param", ReplyAction="http://tempuri.org/IWCFService_ImportKIP/GetSec_ParamResponse")]
        System.IAsyncResult BeginGetSec_Param(string key, System.AsyncCallback callback, object asyncState);
        
        ImportKIP.WCFService_ImportKIP.ParamSecList_result EndGetSec_Param(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFService_ImportKIPChannel : ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataMGListKIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataMGListKIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.DataMGList_KIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.DataMGList_KIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataThreadsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataThreadsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.DataThreadsList_result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.DataThreadsList_result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataKipListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataKipListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.KipDataList_result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.KipDataList_result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImpLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImpLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.ImpLogKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.ImpLogKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImpAnalyzeFileLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImpAnalyzeFileLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataKipListBDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataKipListBDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.KipDataListBD_result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.KipDataListBD_result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataKipListFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataKipListFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.KipDataListFile_result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.KipDataListFile_result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportKipMatchingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportKipMatchingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportKipMatchingAutoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportKipMatchingAutoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportKipMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportKipMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KipIsHideCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public KipIsHideCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KipIsHideBDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public KipIsHideBDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveBoundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveBoundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.RemoveBoundKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.RemoveBoundKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetKIPMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetKIPMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteKipMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteKipMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSec_ParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSec_ParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ImportKIP.WCFService_ImportKIP.ParamSecList_result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ImportKIP.WCFService_ImportKIP.ParamSecList_result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFService_ImportKIPClient : System.ServiceModel.ClientBase<ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP>, ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP {
        
        private BeginOperationDelegate onBeginGetDataMGListKIPDelegate;
        
        private EndOperationDelegate onEndGetDataMGListKIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataMGListKIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataThreadsListDelegate;
        
        private EndOperationDelegate onEndGetDataThreadsListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataThreadsListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataKipListDelegate;
        
        private EndOperationDelegate onEndGetDataKipListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataKipListCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportFileDelegate;
        
        private EndOperationDelegate onEndImportFileDelegate;
        
        private System.Threading.SendOrPostCallback onImportFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImpLogDelegate;
        
        private EndOperationDelegate onEndGetImpLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetImpLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImpAnalyzeFileLogDelegate;
        
        private EndOperationDelegate onEndGetImpAnalyzeFileLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetImpAnalyzeFileLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataKipListBDDelegate;
        
        private EndOperationDelegate onEndGetDataKipListBDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataKipListBDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataKipListFileDelegate;
        
        private EndOperationDelegate onEndGetDataKipListFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataKipListFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportKipMatchingDelegate;
        
        private EndOperationDelegate onEndImportKipMatchingDelegate;
        
        private System.Threading.SendOrPostCallback onImportKipMatchingCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportKipMatchingAutoDelegate;
        
        private EndOperationDelegate onEndImportKipMatchingAutoDelegate;
        
        private System.Threading.SendOrPostCallback onImportKipMatchingAutoCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportKipMeasurementDelegate;
        
        private EndOperationDelegate onEndImportKipMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onImportKipMeasurementCompletedDelegate;
        
        private BeginOperationDelegate onBeginKipIsHideDelegate;
        
        private EndOperationDelegate onEndKipIsHideDelegate;
        
        private System.Threading.SendOrPostCallback onKipIsHideCompletedDelegate;
        
        private BeginOperationDelegate onBeginKipIsHideBDDelegate;
        
        private EndOperationDelegate onEndKipIsHideBDDelegate;
        
        private System.Threading.SendOrPostCallback onKipIsHideBDCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveBoundDelegate;
        
        private EndOperationDelegate onEndRemoveBoundDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveBoundCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetKIPMappingDelegate;
        
        private EndOperationDelegate onEndGetKIPMappingDelegate;
        
        private System.Threading.SendOrPostCallback onGetKIPMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteKipMeasurementDelegate;
        
        private EndOperationDelegate onEndDeleteKipMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteKipMeasurementCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSec_ParamDelegate;
        
        private EndOperationDelegate onEndGetSec_ParamDelegate;
        
        private System.Threading.SendOrPostCallback onGetSec_ParamCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WCFService_ImportKIPClient() {
        }
        
        public WCFService_ImportKIPClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFService_ImportKIPClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFService_ImportKIPClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFService_ImportKIPClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetDataMGListKIPCompletedEventArgs> GetDataMGListKIPCompleted;
        
        public event System.EventHandler<GetDataThreadsListCompletedEventArgs> GetDataThreadsListCompleted;
        
        public event System.EventHandler<GetDataKipListCompletedEventArgs> GetDataKipListCompleted;
        
        public event System.EventHandler<ImportFileCompletedEventArgs> ImportFileCompleted;
        
        public event System.EventHandler<GetImpLogCompletedEventArgs> GetImpLogCompleted;
        
        public event System.EventHandler<GetImpAnalyzeFileLogCompletedEventArgs> GetImpAnalyzeFileLogCompleted;
        
        public event System.EventHandler<GetDataKipListBDCompletedEventArgs> GetDataKipListBDCompleted;
        
        public event System.EventHandler<GetDataKipListFileCompletedEventArgs> GetDataKipListFileCompleted;
        
        public event System.EventHandler<ImportKipMatchingCompletedEventArgs> ImportKipMatchingCompleted;
        
        public event System.EventHandler<ImportKipMatchingAutoCompletedEventArgs> ImportKipMatchingAutoCompleted;
        
        public event System.EventHandler<ImportKipMeasurementCompletedEventArgs> ImportKipMeasurementCompleted;
        
        public event System.EventHandler<KipIsHideCompletedEventArgs> KipIsHideCompleted;
        
        public event System.EventHandler<KipIsHideBDCompletedEventArgs> KipIsHideBDCompleted;
        
        public event System.EventHandler<RemoveBoundCompletedEventArgs> RemoveBoundCompleted;
        
        public event System.EventHandler<GetKIPMappingCompletedEventArgs> GetKIPMappingCompleted;
        
        public event System.EventHandler<DeleteKipMeasurementCompletedEventArgs> DeleteKipMeasurementCompleted;
        
        public event System.EventHandler<GetSec_ParamCompletedEventArgs> GetSec_ParamCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetDataMGListKIP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataMGListKIP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.DataMGList_KIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetDataMGListKIP(System.IAsyncResult result) {
            return base.Channel.EndGetDataMGListKIP(result);
        }
        
        private System.IAsyncResult OnBeginGetDataMGListKIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetDataMGListKIP(callback, asyncState);
        }
        
        private object[] OnEndGetDataMGListKIP(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.DataMGList_KIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetDataMGListKIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataMGListKIPCompleted(object state) {
            if ((this.GetDataMGListKIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataMGListKIPCompleted(this, new GetDataMGListKIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataMGListKIPAsync() {
            this.GetDataMGListKIPAsync(null);
        }
        
        public void GetDataMGListKIPAsync(object userState) {
            if ((this.onBeginGetDataMGListKIPDelegate == null)) {
                this.onBeginGetDataMGListKIPDelegate = new BeginOperationDelegate(this.OnBeginGetDataMGListKIP);
            }
            if ((this.onEndGetDataMGListKIPDelegate == null)) {
                this.onEndGetDataMGListKIPDelegate = new EndOperationDelegate(this.OnEndGetDataMGListKIP);
            }
            if ((this.onGetDataMGListKIPCompletedDelegate == null)) {
                this.onGetDataMGListKIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataMGListKIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataMGListKIPDelegate, null, this.onEndGetDataMGListKIPDelegate, this.onGetDataMGListKIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetDataThreadsList(string inKeyMg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataThreadsList(inKeyMg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.DataThreadsList_result ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetDataThreadsList(System.IAsyncResult result) {
            return base.Channel.EndGetDataThreadsList(result);
        }
        
        private System.IAsyncResult OnBeginGetDataThreadsList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inKeyMg = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetDataThreadsList(inKeyMg, callback, asyncState);
        }
        
        private object[] OnEndGetDataThreadsList(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.DataThreadsList_result retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetDataThreadsList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataThreadsListCompleted(object state) {
            if ((this.GetDataThreadsListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataThreadsListCompleted(this, new GetDataThreadsListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataThreadsListAsync(string inKeyMg) {
            this.GetDataThreadsListAsync(inKeyMg, null);
        }
        
        public void GetDataThreadsListAsync(string inKeyMg, object userState) {
            if ((this.onBeginGetDataThreadsListDelegate == null)) {
                this.onBeginGetDataThreadsListDelegate = new BeginOperationDelegate(this.OnBeginGetDataThreadsList);
            }
            if ((this.onEndGetDataThreadsListDelegate == null)) {
                this.onEndGetDataThreadsListDelegate = new EndOperationDelegate(this.OnEndGetDataThreadsList);
            }
            if ((this.onGetDataThreadsListCompletedDelegate == null)) {
                this.onGetDataThreadsListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataThreadsListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataThreadsListDelegate, new object[] {
                        inKeyMg}, this.onEndGetDataThreadsListDelegate, this.onGetDataThreadsListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetDataKipList(string inKeyThread, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataKipList(inKeyThread, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.KipDataList_result ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetDataKipList(System.IAsyncResult result) {
            return base.Channel.EndGetDataKipList(result);
        }
        
        private System.IAsyncResult OnBeginGetDataKipList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string inKeyThread = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetDataKipList(inKeyThread, callback, asyncState);
        }
        
        private object[] OnEndGetDataKipList(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.KipDataList_result retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetDataKipList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataKipListCompleted(object state) {
            if ((this.GetDataKipListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataKipListCompleted(this, new GetDataKipListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataKipListAsync(string inKeyThread) {
            this.GetDataKipListAsync(inKeyThread, null);
        }
        
        public void GetDataKipListAsync(string inKeyThread, object userState) {
            if ((this.onBeginGetDataKipListDelegate == null)) {
                this.onBeginGetDataKipListDelegate = new BeginOperationDelegate(this.OnBeginGetDataKipList);
            }
            if ((this.onEndGetDataKipListDelegate == null)) {
                this.onEndGetDataKipListDelegate = new EndOperationDelegate(this.OnEndGetDataKipList);
            }
            if ((this.onGetDataKipListCompletedDelegate == null)) {
                this.onGetDataKipListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataKipListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataKipListDelegate, new object[] {
                        inKeyThread}, this.onEndGetDataKipListDelegate, this.onGetDataKipListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginImportFile(double impKey, string typeOfImport, string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportFile(impKey, typeOfImport, fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndImportFile(System.IAsyncResult result) {
            return base.Channel.EndImportFile(result);
        }
        
        private System.IAsyncResult OnBeginImportFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double impKey = ((double)(inValues[0]));
            string typeOfImport = ((string)(inValues[1]));
            string fileName = ((string)(inValues[2]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginImportFile(impKey, typeOfImport, fileName, callback, asyncState);
        }
        
        private object[] OnEndImportFile(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndImportFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportFileCompleted(object state) {
            if ((this.ImportFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportFileCompleted(this, new ImportFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportFileAsync(double impKey, string typeOfImport, string fileName) {
            this.ImportFileAsync(impKey, typeOfImport, fileName, null);
        }
        
        public void ImportFileAsync(double impKey, string typeOfImport, string fileName, object userState) {
            if ((this.onBeginImportFileDelegate == null)) {
                this.onBeginImportFileDelegate = new BeginOperationDelegate(this.OnBeginImportFile);
            }
            if ((this.onEndImportFileDelegate == null)) {
                this.onEndImportFileDelegate = new EndOperationDelegate(this.OnEndImportFile);
            }
            if ((this.onImportFileCompletedDelegate == null)) {
                this.onImportFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportFileCompleted);
            }
            base.InvokeAsync(this.onBeginImportFileDelegate, new object[] {
                        impKey,
                        typeOfImport,
                        fileName}, this.onEndImportFileDelegate, this.onImportFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetImpLog(string keyJornal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImpLog(keyJornal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.ImpLogKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetImpLog(System.IAsyncResult result) {
            return base.Channel.EndGetImpLog(result);
        }
        
        private System.IAsyncResult OnBeginGetImpLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyJornal = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetImpLog(keyJornal, callback, asyncState);
        }
        
        private object[] OnEndGetImpLog(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.ImpLogKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetImpLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImpLogCompleted(object state) {
            if ((this.GetImpLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImpLogCompleted(this, new GetImpLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImpLogAsync(string keyJornal) {
            this.GetImpLogAsync(keyJornal, null);
        }
        
        public void GetImpLogAsync(string keyJornal, object userState) {
            if ((this.onBeginGetImpLogDelegate == null)) {
                this.onBeginGetImpLogDelegate = new BeginOperationDelegate(this.OnBeginGetImpLog);
            }
            if ((this.onEndGetImpLogDelegate == null)) {
                this.onEndGetImpLogDelegate = new EndOperationDelegate(this.OnEndGetImpLog);
            }
            if ((this.onGetImpLogCompletedDelegate == null)) {
                this.onGetImpLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImpLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetImpLogDelegate, new object[] {
                        keyJornal}, this.onEndGetImpLogDelegate, this.onGetImpLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetImpAnalyzeFileLog(string keyJornal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImpAnalyzeFileLog(keyJornal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetImpAnalyzeFileLog(System.IAsyncResult result) {
            return base.Channel.EndGetImpAnalyzeFileLog(result);
        }
        
        private System.IAsyncResult OnBeginGetImpAnalyzeFileLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyJornal = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetImpAnalyzeFileLog(keyJornal, callback, asyncState);
        }
        
        private object[] OnEndGetImpAnalyzeFileLog(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetImpAnalyzeFileLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImpAnalyzeFileLogCompleted(object state) {
            if ((this.GetImpAnalyzeFileLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImpAnalyzeFileLogCompleted(this, new GetImpAnalyzeFileLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImpAnalyzeFileLogAsync(string keyJornal) {
            this.GetImpAnalyzeFileLogAsync(keyJornal, null);
        }
        
        public void GetImpAnalyzeFileLogAsync(string keyJornal, object userState) {
            if ((this.onBeginGetImpAnalyzeFileLogDelegate == null)) {
                this.onBeginGetImpAnalyzeFileLogDelegate = new BeginOperationDelegate(this.OnBeginGetImpAnalyzeFileLog);
            }
            if ((this.onEndGetImpAnalyzeFileLogDelegate == null)) {
                this.onEndGetImpAnalyzeFileLogDelegate = new EndOperationDelegate(this.OnEndGetImpAnalyzeFileLog);
            }
            if ((this.onGetImpAnalyzeFileLogCompletedDelegate == null)) {
                this.onGetImpAnalyzeFileLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImpAnalyzeFileLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetImpAnalyzeFileLogDelegate, new object[] {
                        keyJornal}, this.onEndGetImpAnalyzeFileLogDelegate, this.onGetImpAnalyzeFileLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetDataKipListBD(string keyJornal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataKipListBD(keyJornal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.KipDataListBD_result ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetDataKipListBD(System.IAsyncResult result) {
            return base.Channel.EndGetDataKipListBD(result);
        }
        
        private System.IAsyncResult OnBeginGetDataKipListBD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyJornal = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetDataKipListBD(keyJornal, callback, asyncState);
        }
        
        private object[] OnEndGetDataKipListBD(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.KipDataListBD_result retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetDataKipListBD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataKipListBDCompleted(object state) {
            if ((this.GetDataKipListBDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataKipListBDCompleted(this, new GetDataKipListBDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataKipListBDAsync(string keyJornal) {
            this.GetDataKipListBDAsync(keyJornal, null);
        }
        
        public void GetDataKipListBDAsync(string keyJornal, object userState) {
            if ((this.onBeginGetDataKipListBDDelegate == null)) {
                this.onBeginGetDataKipListBDDelegate = new BeginOperationDelegate(this.OnBeginGetDataKipListBD);
            }
            if ((this.onEndGetDataKipListBDDelegate == null)) {
                this.onEndGetDataKipListBDDelegate = new EndOperationDelegate(this.OnEndGetDataKipListBD);
            }
            if ((this.onGetDataKipListBDCompletedDelegate == null)) {
                this.onGetDataKipListBDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataKipListBDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataKipListBDDelegate, new object[] {
                        keyJornal}, this.onEndGetDataKipListBDDelegate, this.onGetDataKipListBDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetDataKipListFile(string keyJornal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataKipListFile(keyJornal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.KipDataListFile_result ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetDataKipListFile(System.IAsyncResult result) {
            return base.Channel.EndGetDataKipListFile(result);
        }
        
        private System.IAsyncResult OnBeginGetDataKipListFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyJornal = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetDataKipListFile(keyJornal, callback, asyncState);
        }
        
        private object[] OnEndGetDataKipListFile(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.KipDataListFile_result retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetDataKipListFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataKipListFileCompleted(object state) {
            if ((this.GetDataKipListFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataKipListFileCompleted(this, new GetDataKipListFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataKipListFileAsync(string keyJornal) {
            this.GetDataKipListFileAsync(keyJornal, null);
        }
        
        public void GetDataKipListFileAsync(string keyJornal, object userState) {
            if ((this.onBeginGetDataKipListFileDelegate == null)) {
                this.onBeginGetDataKipListFileDelegate = new BeginOperationDelegate(this.OnBeginGetDataKipListFile);
            }
            if ((this.onEndGetDataKipListFileDelegate == null)) {
                this.onEndGetDataKipListFileDelegate = new EndOperationDelegate(this.OnEndGetDataKipListFile);
            }
            if ((this.onGetDataKipListFileCompletedDelegate == null)) {
                this.onGetDataKipListFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataKipListFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataKipListFileDelegate, new object[] {
                        keyJornal}, this.onEndGetDataKipListFileDelegate, this.onGetDataKipListFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginImportKipMatching(string in_nVTDMakingKey, string in_Filekey, string in_DBKey, int typeLink, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportKipMatching(in_nVTDMakingKey, in_Filekey, in_DBKey, typeLink, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndImportKipMatching(System.IAsyncResult result) {
            return base.Channel.EndImportKipMatching(result);
        }
        
        private System.IAsyncResult OnBeginImportKipMatching(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string in_nVTDMakingKey = ((string)(inValues[0]));
            string in_Filekey = ((string)(inValues[1]));
            string in_DBKey = ((string)(inValues[2]));
            int typeLink = ((int)(inValues[3]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginImportKipMatching(in_nVTDMakingKey, in_Filekey, in_DBKey, typeLink, callback, asyncState);
        }
        
        private object[] OnEndImportKipMatching(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndImportKipMatching(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportKipMatchingCompleted(object state) {
            if ((this.ImportKipMatchingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportKipMatchingCompleted(this, new ImportKipMatchingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportKipMatchingAsync(string in_nVTDMakingKey, string in_Filekey, string in_DBKey, int typeLink) {
            this.ImportKipMatchingAsync(in_nVTDMakingKey, in_Filekey, in_DBKey, typeLink, null);
        }
        
        public void ImportKipMatchingAsync(string in_nVTDMakingKey, string in_Filekey, string in_DBKey, int typeLink, object userState) {
            if ((this.onBeginImportKipMatchingDelegate == null)) {
                this.onBeginImportKipMatchingDelegate = new BeginOperationDelegate(this.OnBeginImportKipMatching);
            }
            if ((this.onEndImportKipMatchingDelegate == null)) {
                this.onEndImportKipMatchingDelegate = new EndOperationDelegate(this.OnEndImportKipMatching);
            }
            if ((this.onImportKipMatchingCompletedDelegate == null)) {
                this.onImportKipMatchingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportKipMatchingCompleted);
            }
            base.InvokeAsync(this.onBeginImportKipMatchingDelegate, new object[] {
                        in_nVTDMakingKey,
                        in_Filekey,
                        in_DBKey,
                        typeLink}, this.onEndImportKipMatchingDelegate, this.onImportKipMatchingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginImportKipMatchingAuto(string in_nVTDMakingKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportKipMatchingAuto(in_nVTDMakingKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndImportKipMatchingAuto(System.IAsyncResult result) {
            return base.Channel.EndImportKipMatchingAuto(result);
        }
        
        private System.IAsyncResult OnBeginImportKipMatchingAuto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string in_nVTDMakingKey = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginImportKipMatchingAuto(in_nVTDMakingKey, callback, asyncState);
        }
        
        private object[] OnEndImportKipMatchingAuto(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndImportKipMatchingAuto(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportKipMatchingAutoCompleted(object state) {
            if ((this.ImportKipMatchingAutoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportKipMatchingAutoCompleted(this, new ImportKipMatchingAutoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportKipMatchingAutoAsync(string in_nVTDMakingKey) {
            this.ImportKipMatchingAutoAsync(in_nVTDMakingKey, null);
        }
        
        public void ImportKipMatchingAutoAsync(string in_nVTDMakingKey, object userState) {
            if ((this.onBeginImportKipMatchingAutoDelegate == null)) {
                this.onBeginImportKipMatchingAutoDelegate = new BeginOperationDelegate(this.OnBeginImportKipMatchingAuto);
            }
            if ((this.onEndImportKipMatchingAutoDelegate == null)) {
                this.onEndImportKipMatchingAutoDelegate = new EndOperationDelegate(this.OnEndImportKipMatchingAuto);
            }
            if ((this.onImportKipMatchingAutoCompletedDelegate == null)) {
                this.onImportKipMatchingAutoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportKipMatchingAutoCompleted);
            }
            base.InvokeAsync(this.onBeginImportKipMatchingAutoDelegate, new object[] {
                        in_nVTDMakingKey}, this.onEndImportKipMatchingAutoDelegate, this.onImportKipMatchingAutoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginImportKipMeasurement(string in_nJournalKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportKipMeasurement(in_nJournalKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndImportKipMeasurement(System.IAsyncResult result) {
            return base.Channel.EndImportKipMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginImportKipMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string in_nJournalKey = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginImportKipMeasurement(in_nJournalKey, callback, asyncState);
        }
        
        private object[] OnEndImportKipMeasurement(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndImportKipMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportKipMeasurementCompleted(object state) {
            if ((this.ImportKipMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportKipMeasurementCompleted(this, new ImportKipMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportKipMeasurementAsync(string in_nJournalKey) {
            this.ImportKipMeasurementAsync(in_nJournalKey, null);
        }
        
        public void ImportKipMeasurementAsync(string in_nJournalKey, object userState) {
            if ((this.onBeginImportKipMeasurementDelegate == null)) {
                this.onBeginImportKipMeasurementDelegate = new BeginOperationDelegate(this.OnBeginImportKipMeasurement);
            }
            if ((this.onEndImportKipMeasurementDelegate == null)) {
                this.onEndImportKipMeasurementDelegate = new EndOperationDelegate(this.OnEndImportKipMeasurement);
            }
            if ((this.onImportKipMeasurementCompletedDelegate == null)) {
                this.onImportKipMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportKipMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginImportKipMeasurementDelegate, new object[] {
                        in_nJournalKey}, this.onEndImportKipMeasurementDelegate, this.onImportKipMeasurementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginKipIsHide(string in_nJournalKey, string in_nKipKey, int isHide, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKipIsHide(in_nJournalKey, in_nKipKey, isHide, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndKipIsHide(System.IAsyncResult result) {
            return base.Channel.EndKipIsHide(result);
        }
        
        private System.IAsyncResult OnBeginKipIsHide(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string in_nJournalKey = ((string)(inValues[0]));
            string in_nKipKey = ((string)(inValues[1]));
            int isHide = ((int)(inValues[2]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginKipIsHide(in_nJournalKey, in_nKipKey, isHide, callback, asyncState);
        }
        
        private object[] OnEndKipIsHide(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndKipIsHide(result);
            return new object[] {
                    retVal};
        }
        
        private void OnKipIsHideCompleted(object state) {
            if ((this.KipIsHideCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KipIsHideCompleted(this, new KipIsHideCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KipIsHideAsync(string in_nJournalKey, string in_nKipKey, int isHide) {
            this.KipIsHideAsync(in_nJournalKey, in_nKipKey, isHide, null);
        }
        
        public void KipIsHideAsync(string in_nJournalKey, string in_nKipKey, int isHide, object userState) {
            if ((this.onBeginKipIsHideDelegate == null)) {
                this.onBeginKipIsHideDelegate = new BeginOperationDelegate(this.OnBeginKipIsHide);
            }
            if ((this.onEndKipIsHideDelegate == null)) {
                this.onEndKipIsHideDelegate = new EndOperationDelegate(this.OnEndKipIsHide);
            }
            if ((this.onKipIsHideCompletedDelegate == null)) {
                this.onKipIsHideCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKipIsHideCompleted);
            }
            base.InvokeAsync(this.onBeginKipIsHideDelegate, new object[] {
                        in_nJournalKey,
                        in_nKipKey,
                        isHide}, this.onEndKipIsHideDelegate, this.onKipIsHideCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginKipIsHideBD(string in_nJournalKey, string in_nKipKeyBD, int isHide, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKipIsHideBD(in_nJournalKey, in_nKipKeyBD, isHide, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndKipIsHideBD(System.IAsyncResult result) {
            return base.Channel.EndKipIsHideBD(result);
        }
        
        private System.IAsyncResult OnBeginKipIsHideBD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string in_nJournalKey = ((string)(inValues[0]));
            string in_nKipKeyBD = ((string)(inValues[1]));
            int isHide = ((int)(inValues[2]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginKipIsHideBD(in_nJournalKey, in_nKipKeyBD, isHide, callback, asyncState);
        }
        
        private object[] OnEndKipIsHideBD(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndKipIsHideBD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnKipIsHideBDCompleted(object state) {
            if ((this.KipIsHideBDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KipIsHideBDCompleted(this, new KipIsHideBDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KipIsHideBDAsync(string in_nJournalKey, string in_nKipKeyBD, int isHide) {
            this.KipIsHideBDAsync(in_nJournalKey, in_nKipKeyBD, isHide, null);
        }
        
        public void KipIsHideBDAsync(string in_nJournalKey, string in_nKipKeyBD, int isHide, object userState) {
            if ((this.onBeginKipIsHideBDDelegate == null)) {
                this.onBeginKipIsHideBDDelegate = new BeginOperationDelegate(this.OnBeginKipIsHideBD);
            }
            if ((this.onEndKipIsHideBDDelegate == null)) {
                this.onEndKipIsHideBDDelegate = new EndOperationDelegate(this.OnEndKipIsHideBD);
            }
            if ((this.onKipIsHideBDCompletedDelegate == null)) {
                this.onKipIsHideBDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKipIsHideBDCompleted);
            }
            base.InvokeAsync(this.onBeginKipIsHideBDDelegate, new object[] {
                        in_nJournalKey,
                        in_nKipKeyBD,
                        isHide}, this.onEndKipIsHideBDDelegate, this.onKipIsHideBDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginRemoveBound(string keyImport, string in_Filekey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveBound(keyImport, in_Filekey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.RemoveBoundKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndRemoveBound(System.IAsyncResult result) {
            return base.Channel.EndRemoveBound(result);
        }
        
        private System.IAsyncResult OnBeginRemoveBound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImport = ((string)(inValues[0]));
            string in_Filekey = ((string)(inValues[1]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginRemoveBound(keyImport, in_Filekey, callback, asyncState);
        }
        
        private object[] OnEndRemoveBound(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.RemoveBoundKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndRemoveBound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveBoundCompleted(object state) {
            if ((this.RemoveBoundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveBoundCompleted(this, new RemoveBoundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveBoundAsync(string keyImport, string in_Filekey) {
            this.RemoveBoundAsync(keyImport, in_Filekey, null);
        }
        
        public void RemoveBoundAsync(string keyImport, string in_Filekey, object userState) {
            if ((this.onBeginRemoveBoundDelegate == null)) {
                this.onBeginRemoveBoundDelegate = new BeginOperationDelegate(this.OnBeginRemoveBound);
            }
            if ((this.onEndRemoveBoundDelegate == null)) {
                this.onEndRemoveBoundDelegate = new EndOperationDelegate(this.OnEndRemoveBound);
            }
            if ((this.onRemoveBoundCompletedDelegate == null)) {
                this.onRemoveBoundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveBoundCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveBoundDelegate, new object[] {
                        keyImport,
                        in_Filekey}, this.onEndRemoveBoundDelegate, this.onRemoveBoundCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetKIPMapping(string in_nVTDMakingKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetKIPMapping(in_nVTDMakingKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetKIPMapping(System.IAsyncResult result) {
            return base.Channel.EndGetKIPMapping(result);
        }
        
        private System.IAsyncResult OnBeginGetKIPMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string in_nVTDMakingKey = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetKIPMapping(in_nVTDMakingKey, callback, asyncState);
        }
        
        private object[] OnEndGetKIPMapping(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetKIPMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetKIPMappingCompleted(object state) {
            if ((this.GetKIPMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetKIPMappingCompleted(this, new GetKIPMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetKIPMappingAsync(string in_nVTDMakingKey) {
            this.GetKIPMappingAsync(in_nVTDMakingKey, null);
        }
        
        public void GetKIPMappingAsync(string in_nVTDMakingKey, object userState) {
            if ((this.onBeginGetKIPMappingDelegate == null)) {
                this.onBeginGetKIPMappingDelegate = new BeginOperationDelegate(this.OnBeginGetKIPMapping);
            }
            if ((this.onEndGetKIPMappingDelegate == null)) {
                this.onEndGetKIPMappingDelegate = new EndOperationDelegate(this.OnEndGetKIPMapping);
            }
            if ((this.onGetKIPMappingCompletedDelegate == null)) {
                this.onGetKIPMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetKIPMappingCompleted);
            }
            base.InvokeAsync(this.onBeginGetKIPMappingDelegate, new object[] {
                        in_nVTDMakingKey}, this.onEndGetKIPMappingDelegate, this.onGetKIPMappingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginDeleteKipMeasurement(string jornalKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteKipMeasurement(jornalKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndDeleteKipMeasurement(System.IAsyncResult result) {
            return base.Channel.EndDeleteKipMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginDeleteKipMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string jornalKey = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginDeleteKipMeasurement(jornalKey, callback, asyncState);
        }
        
        private object[] OnEndDeleteKipMeasurement(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndDeleteKipMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteKipMeasurementCompleted(object state) {
            if ((this.DeleteKipMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteKipMeasurementCompleted(this, new DeleteKipMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteKipMeasurementAsync(string jornalKey) {
            this.DeleteKipMeasurementAsync(jornalKey, null);
        }
        
        public void DeleteKipMeasurementAsync(string jornalKey, object userState) {
            if ((this.onBeginDeleteKipMeasurementDelegate == null)) {
                this.onBeginDeleteKipMeasurementDelegate = new BeginOperationDelegate(this.OnBeginDeleteKipMeasurement);
            }
            if ((this.onEndDeleteKipMeasurementDelegate == null)) {
                this.onEndDeleteKipMeasurementDelegate = new EndOperationDelegate(this.OnEndDeleteKipMeasurement);
            }
            if ((this.onDeleteKipMeasurementCompletedDelegate == null)) {
                this.onDeleteKipMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteKipMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteKipMeasurementDelegate, new object[] {
                        jornalKey}, this.onEndDeleteKipMeasurementDelegate, this.onDeleteKipMeasurementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.BeginGetSec_Param(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSec_Param(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ImportKIP.WCFService_ImportKIP.ParamSecList_result ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP.EndGetSec_Param(System.IAsyncResult result) {
            return base.Channel.EndGetSec_Param(result);
        }
        
        private System.IAsyncResult OnBeginGetSec_Param(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).BeginGetSec_Param(key, callback, asyncState);
        }
        
        private object[] OnEndGetSec_Param(System.IAsyncResult result) {
            ImportKIP.WCFService_ImportKIP.ParamSecList_result retVal = ((ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP)(this)).EndGetSec_Param(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSec_ParamCompleted(object state) {
            if ((this.GetSec_ParamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSec_ParamCompleted(this, new GetSec_ParamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSec_ParamAsync(string key) {
            this.GetSec_ParamAsync(key, null);
        }
        
        public void GetSec_ParamAsync(string key, object userState) {
            if ((this.onBeginGetSec_ParamDelegate == null)) {
                this.onBeginGetSec_ParamDelegate = new BeginOperationDelegate(this.OnBeginGetSec_Param);
            }
            if ((this.onEndGetSec_ParamDelegate == null)) {
                this.onEndGetSec_ParamDelegate = new EndOperationDelegate(this.OnEndGetSec_Param);
            }
            if ((this.onGetSec_ParamCompletedDelegate == null)) {
                this.onGetSec_ParamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSec_ParamCompleted);
            }
            base.InvokeAsync(this.onBeginGetSec_ParamDelegate, new object[] {
                        key}, this.onEndGetSec_ParamDelegate, this.onGetSec_ParamCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP CreateChannel() {
            return new WCFService_ImportKIPClientChannel(this);
        }
        
        private class WCFService_ImportKIPClientChannel : ChannelBase<ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP>, ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP {
            
            public WCFService_ImportKIPClientChannel(System.ServiceModel.ClientBase<ImportKIP.WCFService_ImportKIP.IWCFService_ImportKIP> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetDataMGListKIP(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDataMGListKIP", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.DataMGList_KIP EndGetDataMGListKIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.DataMGList_KIP _result = ((ImportKIP.WCFService_ImportKIP.DataMGList_KIP)(base.EndInvoke("GetDataMGListKIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataThreadsList(string inKeyMg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = inKeyMg;
                System.IAsyncResult _result = base.BeginInvoke("GetDataThreadsList", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.DataThreadsList_result EndGetDataThreadsList(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.DataThreadsList_result _result = ((ImportKIP.WCFService_ImportKIP.DataThreadsList_result)(base.EndInvoke("GetDataThreadsList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataKipList(string inKeyThread, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = inKeyThread;
                System.IAsyncResult _result = base.BeginInvoke("GetDataKipList", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.KipDataList_result EndGetDataKipList(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.KipDataList_result _result = ((ImportKIP.WCFService_ImportKIP.KipDataList_result)(base.EndInvoke("GetDataKipList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportFile(double impKey, string typeOfImport, string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = impKey;
                _args[1] = typeOfImport;
                _args[2] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("ImportFile", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndImportFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP _result = ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(base.EndInvoke("ImportFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImpLog(string keyJornal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyJornal;
                System.IAsyncResult _result = base.BeginInvoke("GetImpLog", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.ImpLogKIP EndGetImpLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.ImpLogKIP _result = ((ImportKIP.WCFService_ImportKIP.ImpLogKIP)(base.EndInvoke("GetImpLog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImpAnalyzeFileLog(string keyJornal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyJornal;
                System.IAsyncResult _result = base.BeginInvoke("GetImpAnalyzeFileLog", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile EndGetImpAnalyzeFileLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile _result = ((ImportKIP.WCFService_ImportKIP.ImpLog_resulAnalyzetKipFile)(base.EndInvoke("GetImpAnalyzeFileLog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataKipListBD(string keyJornal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyJornal;
                System.IAsyncResult _result = base.BeginInvoke("GetDataKipListBD", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.KipDataListBD_result EndGetDataKipListBD(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.KipDataListBD_result _result = ((ImportKIP.WCFService_ImportKIP.KipDataListBD_result)(base.EndInvoke("GetDataKipListBD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataKipListFile(string keyJornal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyJornal;
                System.IAsyncResult _result = base.BeginInvoke("GetDataKipListFile", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.KipDataListFile_result EndGetDataKipListFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.KipDataListFile_result _result = ((ImportKIP.WCFService_ImportKIP.KipDataListFile_result)(base.EndInvoke("GetDataKipListFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportKipMatching(string in_nVTDMakingKey, string in_Filekey, string in_DBKey, int typeLink, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = in_nVTDMakingKey;
                _args[1] = in_Filekey;
                _args[2] = in_DBKey;
                _args[3] = typeLink;
                System.IAsyncResult _result = base.BeginInvoke("ImportKipMatching", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP EndImportKipMatching(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP _result = ((ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP)(base.EndInvoke("ImportKipMatching", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportKipMatchingAuto(string in_nVTDMakingKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = in_nVTDMakingKey;
                System.IAsyncResult _result = base.BeginInvoke("ImportKipMatchingAuto", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndImportKipMatchingAuto(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP _result = ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(base.EndInvoke("ImportKipMatchingAuto", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportKipMeasurement(string in_nJournalKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = in_nJournalKey;
                System.IAsyncResult _result = base.BeginInvoke("ImportKipMeasurement", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndImportKipMeasurement(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP _result = ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(base.EndInvoke("ImportKipMeasurement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginKipIsHide(string in_nJournalKey, string in_nKipKey, int isHide, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = in_nJournalKey;
                _args[1] = in_nKipKey;
                _args[2] = isHide;
                System.IAsyncResult _result = base.BeginInvoke("KipIsHide", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndKipIsHide(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP _result = ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(base.EndInvoke("KipIsHide", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginKipIsHideBD(string in_nJournalKey, string in_nKipKeyBD, int isHide, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = in_nJournalKey;
                _args[1] = in_nKipKeyBD;
                _args[2] = isHide;
                System.IAsyncResult _result = base.BeginInvoke("KipIsHideBD", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndKipIsHideBD(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP _result = ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(base.EndInvoke("KipIsHideBD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveBound(string keyImport, string in_Filekey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = keyImport;
                _args[1] = in_Filekey;
                System.IAsyncResult _result = base.BeginInvoke("RemoveBound", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.RemoveBoundKIP EndRemoveBound(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.RemoveBoundKIP _result = ((ImportKIP.WCFService_ImportKIP.RemoveBoundKIP)(base.EndInvoke("RemoveBound", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetKIPMapping(string in_nVTDMakingKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = in_nVTDMakingKey;
                System.IAsyncResult _result = base.BeginInvoke("GetKIPMapping", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP EndGetKIPMapping(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP _result = ((ImportKIP.WCFService_ImportKIP.KeyBoundResultKIP)(base.EndInvoke("GetKIPMapping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteKipMeasurement(string jornalKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = jornalKey;
                System.IAsyncResult _result = base.BeginInvoke("DeleteKipMeasurement", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP EndDeleteKipMeasurement(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP _result = ((ImportKIP.WCFService_ImportKIP.StatusAnswer_ImportKIP)(base.EndInvoke("DeleteKipMeasurement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSec_Param(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetSec_Param", _args, callback, asyncState);
                return _result;
            }
            
            public ImportKIP.WCFService_ImportKIP.ParamSecList_result EndGetSec_Param(System.IAsyncResult result) {
                object[] _args = new object[0];
                ImportKIP.WCFService_ImportKIP.ParamSecList_result _result = ((ImportKIP.WCFService_ImportKIP.ParamSecList_result)(base.EndInvoke("GetSec_Param", _args, result)));
                return _result;
            }
        }
    }
}
